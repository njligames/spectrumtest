import { BsLintConfig, BsLintRules } from './index';
import { Program, BscFile } from 'brighterscript';
import { DiagnosticSeverity } from 'brighterscript/dist/astUtils';
import { ChangeEntry, TextEdit } from './textEdit';
export declare function getDefaultRules(): BsLintConfig['rules'];
export declare function getDefaultSeverity(): {
    assignAllPath: DiagnosticSeverity;
    unreachableCode: DiagnosticSeverity;
    unsafePathLoop: DiagnosticSeverity;
    unsafeIterators: DiagnosticSeverity;
    caseSensitivity: DiagnosticSeverity;
    unusedVariable: DiagnosticSeverity;
    consistentReturn: DiagnosticSeverity;
    inlineIfStyle: import(".").RuleInlineIf;
    blockIfStyle: import(".").RuleBlockIf;
    conditionStyle: import(".").RuleCondition;
    namedFunctionStyle: import(".").RuleFunction;
    anonFunctionStyle: import(".").RuleFunction;
    aaCommaStyle: import(".").RuleAAComma;
    typeAnnotations: import(".").RuleTypeAnnotations;
    noPrint: DiagnosticSeverity;
};
export declare function normalizeConfig(options: BsLintConfig): BsLintConfig;
export declare function mergeConfigs(a: BsLintConfig, b: BsLintConfig): BsLintConfig;
export interface PluginContext {
    program: Readonly<Program>;
    severity: Readonly<BsLintRules>;
    globals: string[];
    ignores: (file: BscFile) => boolean;
    fix: Readonly<boolean>;
    checkUsage: Readonly<boolean>;
    addFixes: (file: BscFile, entry: ChangeEntry) => void;
}
export interface PluginWrapperContext extends PluginContext {
    pendingFixes: Map<string, TextEdit[]>;
    applyFixes: () => Promise<void>;
}
export declare function createContext(program: Program): PluginWrapperContext;
