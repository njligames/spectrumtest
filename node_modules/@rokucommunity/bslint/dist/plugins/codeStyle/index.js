"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectWrappingAAMembersIndexes = void 0;
const brighterscript_1 = require("brighterscript");
const textEdit_1 = require("../../textEdit");
const diagnosticMessages_1 = require("./diagnosticMessages");
const styleFixes_1 = require("./styleFixes");
class CodeStyle {
    constructor(lintContext) {
        this.lintContext = lintContext;
    }
    onGetCodeActions(event) {
        const addFixes = textEdit_1.addFixesToEvent(event);
        styleFixes_1.extractFixes(addFixes, event.diagnostics);
    }
    afterFileValidate(file) {
        if (!brighterscript_1.isBrsFile(file) || this.lintContext.ignores(file)) {
            return;
        }
        const diagnostics = [];
        const { severity, fix } = this.lintContext;
        const { inlineIfStyle, blockIfStyle, conditionStyle, noPrint, aaCommaStyle } = severity;
        const validatePrint = noPrint !== brighterscript_1.DiagnosticSeverity.Hint;
        const validateInlineIf = inlineIfStyle !== 'off';
        const disallowInlineIf = inlineIfStyle === 'never';
        const requireInlineIfThen = inlineIfStyle === 'then';
        const validateBlockIf = blockIfStyle !== 'off';
        const requireBlockIfThen = blockIfStyle === 'then';
        const validateCondition = conditionStyle !== 'off';
        const requireConditionGroup = conditionStyle === 'group';
        const validateAAStyle = aaCommaStyle !== 'off';
        const walkExpressions = validateAAStyle;
        file.ast.walk(brighterscript_1.createVisitor({
            IfStatement: s => {
                const hasThenToken = !!s.tokens.then;
                if (!s.isInline && validateBlockIf) {
                    if (hasThenToken !== requireBlockIfThen) {
                        diagnostics.push(requireBlockIfThen
                            ? diagnosticMessages_1.messages.addBlockIfThenKeyword(s)
                            : diagnosticMessages_1.messages.removeBlockIfThenKeyword(s));
                    }
                }
                else if (s.isInline && validateInlineIf) {
                    if (disallowInlineIf) {
                        diagnostics.push(diagnosticMessages_1.messages.inlineIfNotAllowed(s.range));
                    }
                    else if (hasThenToken !== requireInlineIfThen) {
                        diagnostics.push(requireInlineIfThen
                            ? diagnosticMessages_1.messages.addInlineIfThenKeyword(s)
                            : diagnosticMessages_1.messages.removeInlineIfThenKeyword(s));
                    }
                }
                if (validateCondition) {
                    if (brighterscript_1.isGroupingExpression(s.condition) !== requireConditionGroup) {
                        diagnostics.push(requireConditionGroup
                            ? diagnosticMessages_1.messages.addParenthesisAroundCondition(s)
                            : diagnosticMessages_1.messages.removeParenthesisAroundCondition(s));
                    }
                }
            },
            WhileStatement: s => {
                if (validateCondition) {
                    if (brighterscript_1.isGroupingExpression(s.condition) !== requireConditionGroup) {
                        diagnostics.push(requireConditionGroup
                            ? diagnosticMessages_1.messages.addParenthesisAroundCondition(s)
                            : diagnosticMessages_1.messages.removeParenthesisAroundCondition(s));
                    }
                }
            },
            PrintStatement: s => {
                if (validatePrint) {
                    diagnostics.push(diagnosticMessages_1.messages.noPrint(s.tokens.print.range, noPrint));
                }
            },
            AALiteralExpression: e => {
                if (validateAAStyle) {
                    this.validateAAStyle(e, aaCommaStyle, diagnostics);
                }
            }
        }), { walkMode: walkExpressions ? brighterscript_1.WalkMode.visitAllRecursive : brighterscript_1.WalkMode.visitStatementsRecursive });
        // validate function style (`function` or `sub`)
        for (const fun of file.parser.references.functionExpressions) {
            this.validateFunctionStyle(fun, diagnostics);
        }
        // add file reference
        let bsDiagnostics = diagnostics.map(diagnostic => (Object.assign(Object.assign({}, diagnostic), { file })));
        // apply fix
        if (fix) {
            bsDiagnostics = styleFixes_1.extractFixes(this.lintContext.addFixes, bsDiagnostics);
        }
        // append diagnostics
        file.addDiagnostics(bsDiagnostics);
    }
    validateAAStyle(aa, aaCommaStyle, diagnostics) {
        const indexes = collectWrappingAAMembersIndexes(aa);
        const last = indexes.length - 1;
        indexes.forEach((index, i) => {
            const member = aa.elements[index];
            const hasComma = !!member.commaToken;
            if (aaCommaStyle === 'never' || (i === last && aaCommaStyle === 'no-dangling')) {
                if (hasComma) {
                    diagnostics.push(diagnosticMessages_1.messages.removeAAComma(member.commaToken.range));
                }
            }
            else if (!hasComma) {
                diagnostics.push(diagnosticMessages_1.messages.addAAComma(member.value.range));
            }
        });
    }
    validateFunctionStyle(fun, diagnostics) {
        const { severity } = this.lintContext;
        const { namedFunctionStyle, anonFunctionStyle, typeAnnotations } = severity;
        const style = fun.functionStatement ? namedFunctionStyle : anonFunctionStyle;
        const kind = fun.functionType.kind;
        const hasReturnedValue = style === 'auto' || typeAnnotations !== 'off' ? this.getFunctionReturns(fun) : false;
        // type annotations
        if (typeAnnotations !== 'off') {
            if (typeAnnotations !== 'args') {
                if (hasReturnedValue && !fun.returnTypeToken) {
                    diagnostics.push(diagnosticMessages_1.messages.expectedReturnTypeAnnotation(fun.range));
                }
            }
            if (typeAnnotations !== 'return') {
                const missingAnnotation = fun.parameters.find(arg => !arg.typeToken);
                if (missingAnnotation) {
                    // only report 1st missing arg annotation to avoid error overload
                    diagnostics.push(diagnosticMessages_1.messages.expectedTypeAnnotation(missingAnnotation.range));
                }
            }
        }
        // keyword style
        if (style === 'off') {
            return;
        }
        if (style === 'no-function') {
            if (kind === brighterscript_1.TokenKind.Function) {
                diagnostics.push(diagnosticMessages_1.messages.expectedSubKeyword(fun, `(always use 'sub')`));
            }
            return;
        }
        if (style === 'no-sub') {
            if (kind === brighterscript_1.TokenKind.Sub) {
                diagnostics.push(diagnosticMessages_1.messages.expectedFunctionKeyword(fun, `(always use 'function')`));
            }
            return;
        }
        // auto
        if (hasReturnedValue) {
            if (kind !== brighterscript_1.TokenKind.Function) {
                diagnostics.push(diagnosticMessages_1.messages.expectedFunctionKeyword(fun, `(use 'function' when a value is returned)`));
            }
        }
        else if (kind !== brighterscript_1.TokenKind.Sub) {
            diagnostics.push(diagnosticMessages_1.messages.expectedSubKeyword(fun, `(use 'sub' when no value is returned)`));
        }
    }
    getFunctionReturns(fun) {
        let hasReturnedValue = false;
        if (fun.returnTypeToken) {
            hasReturnedValue = fun.returnTypeToken.kind !== brighterscript_1.TokenKind.Void;
        }
        else {
            const cancel = new brighterscript_1.CancellationTokenSource();
            fun.body.walk(brighterscript_1.createVisitor({
                ReturnStatement: s => {
                    hasReturnedValue = !!s.value;
                    cancel.cancel();
                }
            }), { walkMode: brighterscript_1.WalkMode.visitStatements, cancel: cancel.token });
        }
        return hasReturnedValue;
    }
}
exports.default = CodeStyle;
/**
 * Collect indexes of non-inline AA members
 */
function collectWrappingAAMembersIndexes(aa) {
    const indexes = [];
    const { elements } = aa;
    const lastIndex = elements.length - 1;
    for (let i = 0; i < lastIndex; i++) {
        const e = elements[i];
        if (brighterscript_1.isCommentStatement(e)) {
            continue;
        }
        const ne = elements[i + 1];
        const hasNL = brighterscript_1.isCommentStatement(ne) || ne.range.start.line > e.range.end.line;
        if (hasNL) {
            indexes.push(i);
        }
    }
    const last = elements[lastIndex];
    if (last && !brighterscript_1.isCommentStatement(last)) {
        indexes.push(lastIndex);
    }
    return indexes;
}
exports.collectWrappingAAMembersIndexes = collectWrappingAAMembersIndexes;
//# sourceMappingURL=index.js.map