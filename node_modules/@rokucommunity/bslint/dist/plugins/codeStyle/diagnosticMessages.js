"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.messages = exports.CodeStyleError = void 0;
const brighterscript_1 = require("brighterscript");
var CodeStyleError;
(function (CodeStyleError) {
    CodeStyleError["InlineIfFound"] = "LINT3001";
    CodeStyleError["InlineIfThenMissing"] = "LINT3002";
    CodeStyleError["InlineIfThenFound"] = "LINT3003";
    CodeStyleError["BlockIfThenMissing"] = "LINT3004";
    CodeStyleError["BlockIfThenFound"] = "LINT3005";
    CodeStyleError["ConditionGroupMissing"] = "LINT3006";
    CodeStyleError["ConditionGroupFound"] = "LINT3007";
    CodeStyleError["SubKeywordExpected"] = "LINT3008";
    CodeStyleError["FunctionKeywordExpected"] = "LINT3009";
    CodeStyleError["ReturnTypeAnnotation"] = "LINT3010";
    CodeStyleError["TypeAnnotation"] = "LINT3011";
    CodeStyleError["NoPrint"] = "LINT3012";
    CodeStyleError["AACommaFound"] = "LINT3013";
    CodeStyleError["AACommaMissing"] = "LINT3014";
})(CodeStyleError = exports.CodeStyleError || (exports.CodeStyleError = {}));
const CS = 'Code style:';
const ST = 'Strictness:';
exports.messages = {
    addBlockIfThenKeyword: (stat) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.BlockIfThenMissing,
        source: 'bslint',
        message: `${CS} add 'then' keyword`,
        range: stat.tokens.if.range,
        data: stat
    }),
    removeBlockIfThenKeyword: (stat) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.BlockIfThenFound,
        source: 'bslint',
        message: `${CS} remove 'then' keyword`,
        range: stat.tokens.then.range,
        data: stat
    }),
    inlineIfNotAllowed: (range) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.InlineIfFound,
        source: 'bslint',
        message: `${CS} no inline if statement allowed`,
        range
    }),
    addInlineIfThenKeyword: (stat) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.InlineIfThenMissing,
        source: 'bslint',
        message: `${CS} add 'then' keyword`,
        range: stat.tokens.if.range,
        data: stat
    }),
    removeInlineIfThenKeyword: (stat) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.InlineIfThenFound,
        source: 'bslint',
        message: `${CS} remove 'then' keyword`,
        range: stat.tokens.then.range,
        data: stat
    }),
    addParenthesisAroundCondition: (stat) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.ConditionGroupMissing,
        source: 'bslint',
        message: `${CS} add parenthesis around condition`,
        range: stat.condition.range,
        data: stat
    }),
    removeParenthesisAroundCondition: (stat) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.ConditionGroupFound,
        source: 'bslint',
        message: `${CS} remove parenthesis around condition`,
        range: stat.condition.range,
        data: stat
    }),
    expectedSubKeyword: (fun, reason) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.SubKeywordExpected,
        source: 'bslint',
        message: `${CS} expected 'sub' keyword ${reason}`,
        range: fun.functionType.range,
        data: fun
    }),
    expectedFunctionKeyword: (fun, reason) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.FunctionKeywordExpected,
        source: 'bslint',
        message: `${CS} expected 'function' keyword ${reason}`,
        range: fun.functionType.range,
        data: fun
    }),
    expectedReturnTypeAnnotation: (range) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.ReturnTypeAnnotation,
        source: 'bslint',
        message: `${ST} function should declare the return type`,
        range
    }),
    expectedTypeAnnotation: (range) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.TypeAnnotation,
        source: 'bslint',
        message: `${ST} type annotation required`,
        range
    }),
    noPrint: (range, severity) => ({
        severity: severity,
        code: CodeStyleError.NoPrint,
        source: 'bslint',
        message: `${CS} Avoid using direct Print statements`,
        range
    }),
    removeAAComma: (range) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.AACommaFound,
        source: 'bslint',
        message: `Remove optional comma`,
        range
    }),
    addAAComma: (range) => ({
        severity: brighterscript_1.DiagnosticSeverity.Error,
        code: CodeStyleError.AACommaMissing,
        source: 'bslint',
        message: `Add comma after the expression`,
        range
    })
};
//# sourceMappingURL=diagnosticMessages.js.map