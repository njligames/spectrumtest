"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isBranchedStatement = void 0;
const parser_1 = require("brighterscript/dist/parser");
const astUtils_1 = require("brighterscript/dist/astUtils");
const returnTracking_1 = require("./returnTracking");
const varTracking_1 = require("./varTracking");
const trackFixes_1 = require("./trackFixes");
const textEdit_1 = require("../../textEdit");
class TrackCodeFlow {
    constructor(lintContext) {
        this.lintContext = lintContext;
    }
    onGetCodeActions(event) {
        const addFixes = textEdit_1.addFixesToEvent(event);
        trackFixes_1.extractFixes(addFixes, event.diagnostics);
    }
    afterScopeValidate(scope, files, callables) {
        const diagnostics = varTracking_1.runDeferredValidation(this.lintContext, scope, files, callables);
        scope.addDiagnostics(diagnostics);
    }
    afterFileValidate(file) {
        if (!astUtils_1.isBrsFile(file) || this.lintContext.ignores(file)) {
            return;
        }
        let diagnostics = [];
        varTracking_1.resetVarContext(file);
        file.parser.references.functionExpressions.forEach((fun) => {
            const state = {
                file: file,
                fun: fun,
                parent: undefined,
                stack: [],
                blocks: new WeakMap(),
                ifs: undefined,
                branch: undefined
            };
            let curr = {
                stat: new parser_1.EmptyStatement()
            };
            const returnLinter = returnTracking_1.createReturnLinter(this.lintContext, file, fun, state, diagnostics);
            const varLinter = varTracking_1.createVarLinter(this.lintContext, file, fun, state, diagnostics);
            // 1. close
            // 2. visit -> curr
            // 3. open -> curr becomes parent
            const visitStatement = astUtils_1.createStackedVisitor((stat, stack) => {
                state.stack = stack;
                curr = {
                    stat: stat,
                    parent: stack[stack.length - 1],
                    branches: isBranchedStatement(stat) ? 2 : 1
                };
                returnLinter.visitStatement(curr);
                varLinter.visitStatement(curr);
            }, (opened) => {
                state.blocks.set(opened, curr);
                varLinter.openBlock(curr);
                if (astUtils_1.isIfStatement(opened)) {
                    state.ifs = curr;
                }
                else if (!curr.parent || astUtils_1.isIfStatement(curr.parent)) {
                    state.branch = curr;
                }
                state.parent = curr;
            }, (closed, stack) => {
                const block = state.blocks.get(closed);
                state.parent = state.blocks.get(stack[stack.length - 1]);
                if (astUtils_1.isIfStatement(closed)) {
                    const { ifs, branch } = findBranch(state);
                    state.ifs = ifs;
                    state.branch = branch;
                }
                if (block) {
                    returnLinter.closeBlock(block);
                    varLinter.closeBlock(block);
                }
            });
            visitStatement(fun.body, undefined);
            if (fun.body.statements.length > 0) {
                /* eslint-disable no-bitwise */
                fun.body.walk((elem, parent) => {
                    // note: logic to ignore CommentStatement used as expression
                    if (astUtils_1.isStatement(elem) && !astUtils_1.isExpression(parent)) {
                        visitStatement(elem, parent);
                    }
                    else if (parent) {
                        varLinter.visitExpression(elem, parent, curr);
                    }
                }, { walkMode: astUtils_1.WalkMode.visitStatements | astUtils_1.WalkMode.visitExpressions });
            }
            else {
                // ensure empty functions are finalized
                state.blocks.set(fun.body, curr);
                state.stack.push(fun.body);
            }
            // close remaining open blocks
            let remain = state.stack.length;
            while (remain-- > 0) {
                const last = state.stack.pop();
                if (!last) {
                    continue;
                }
                const block = state.blocks.get(last);
                state.parent = remain > 0 ? state.blocks.get(state.stack[remain - 1]) : undefined;
                if (block) {
                    returnLinter.closeBlock(block);
                    varLinter.closeBlock(block);
                }
            }
        });
        if (this.lintContext.fix) {
            diagnostics = trackFixes_1.extractFixes(this.lintContext.addFixes, diagnostics);
        }
        file.addDiagnostics(diagnostics);
    }
}
exports.default = TrackCodeFlow;
// Find parent if and block where code flow is branched
function findBranch(state) {
    const { blocks, parent, stack } = state;
    for (let i = stack.length - 2; i >= 0; i--) {
        if (astUtils_1.isIfStatement(stack[i])) {
            return {
                ifs: blocks.get(stack[i]),
                branch: blocks.get(stack[i + 1])
            };
        }
    }
    return {
        ifs: undefined,
        branch: parent
    };
}
// `if` and `for/while` are considered as multi-branch
function isBranchedStatement(stat) {
    return astUtils_1.isIfStatement(stat) || astUtils_1.isForStatement(stat) || astUtils_1.isForEachStatement(stat) || astUtils_1.isWhileStatement(stat);
}
exports.isBranchedStatement = isBranchedStatement;
//# sourceMappingURL=index.js.map