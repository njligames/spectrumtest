"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContext = exports.mergeConfigs = exports.normalizeConfig = exports.getDefaultSeverity = exports.getDefaultRules = void 0;
const jsonc_parser_1 = require("jsonc-parser");
const minimatch = require("minimatch");
const fs_1 = require("fs");
const path = require("path");
const astUtils_1 = require("brighterscript/dist/astUtils");
const textEdit_1 = require("./textEdit");
const Linter_1 = require("./Linter");
function getDefaultRules() {
    return {
        'assign-all-paths': 'error',
        'unsafe-path-loop': 'error',
        'unsafe-iterators': 'error',
        'unreachable-code': 'info',
        'case-sensitivity': 'warn',
        'unused-variable': 'warn',
        // 'no-stop': 'off',
        'consistent-return': 'error',
        // 'only-function': 'off',
        // 'only-sub': 'off',
        'inline-if-style': 'then',
        'block-if-style': 'no-then',
        'condition-style': 'no-group',
        'named-function-style': 'auto',
        'anon-function-style': 'auto',
        'aa-comma-style': 'no-dangling',
        'type-annotations': 'off',
        'no-print': 'off'
    };
}
exports.getDefaultRules = getDefaultRules;
function getDefaultSeverity() {
    return rulesToSeverity(getDefaultRules());
}
exports.getDefaultSeverity = getDefaultSeverity;
function normalizeConfig(options) {
    const baseConfig = {
        rules: getDefaultRules()
    };
    const projectConfig = mergeConfigs(loadConfig(options), { rules: options.rules });
    return mergeConfigs(baseConfig, projectConfig);
}
exports.normalizeConfig = normalizeConfig;
function mergeConfigs(a, b) {
    return Object.assign(Object.assign(Object.assign({}, a), b), { rules: Object.assign(Object.assign({}, (a.rules || {})), (b.rules || {})) });
}
exports.mergeConfigs = mergeConfigs;
function loadConfig(options) {
    if (options.lintConfig) {
        const bsconfig = tryLoadConfig(options.lintConfig);
        if (bsconfig) {
            return Object.assign(Object.assign({}, options), bsconfig);
        }
        else {
            throw new Error(`Configuration file '${options.lintConfig}' not found`);
        }
    }
    if (options.project) {
        const bsconfig = tryLoadConfig(path.join(path.dirname(options.project), 'bslint.json'));
        if (bsconfig) {
            return Object.assign(Object.assign({}, options), bsconfig);
        }
    }
    if (options.rootDir) {
        const bsconfig = tryLoadConfig(path.join(options.rootDir, 'bslint.json'));
        if (bsconfig) {
            return Object.assign(Object.assign({}, options), bsconfig);
        }
    }
    const bsconfig = tryLoadConfig('./bslint.json');
    if (bsconfig) {
        return Object.assign(Object.assign({}, options), bsconfig);
    }
    return options;
}
function tryLoadConfig(filename) {
    if (!fs_1.existsSync(filename)) {
        return undefined;
    }
    const bserrors = [];
    const bsconfig = jsonc_parser_1.parse(fs_1.readFileSync(filename).toString(), bserrors);
    if (bserrors.length) {
        throw new Error(`Invalid bslint configuration file '${filename}': ${bserrors}`);
    }
    return bsconfig;
}
function createContext(program) {
    const { rules, fix, checkUsage, globals, ignores } = normalizeConfig(program.options);
    const ignorePatterns = (ignores || []).map(pattern => {
        return pattern.startsWith('**/') ? pattern : '**/' + pattern;
    });
    const pendingFixes = new Map();
    return {
        program: program,
        severity: rulesToSeverity(rules),
        globals,
        ignores: (file) => {
            return !file || ignorePatterns.some(pattern => minimatch(file.pathAbsolute, pattern));
        },
        fix,
        checkUsage,
        addFixes: (file, entry) => {
            if (!pendingFixes.has(file.pathAbsolute)) {
                pendingFixes.set(file.pathAbsolute, entry.changes);
            }
            else {
                pendingFixes.get(file.pathAbsolute).push(...entry.changes);
            }
        },
        applyFixes: () => Linter_1.addJob(textEdit_1.applyFixes(fix, pendingFixes)),
        pendingFixes
    };
}
exports.createContext = createContext;
function rulesToSeverity(rules) {
    return {
        assignAllPath: ruleToSeverity(rules['assign-all-paths']),
        unreachableCode: ruleToSeverity(rules['unreachable-code']),
        unsafePathLoop: ruleToSeverity(rules['unsafe-path-loop']),
        unsafeIterators: ruleToSeverity(rules['unsafe-iterators']),
        caseSensitivity: ruleToSeverity(rules['case-sensitivity']),
        unusedVariable: ruleToSeverity(rules['unused-variable']),
        consistentReturn: ruleToSeverity(rules['consistent-return']),
        inlineIfStyle: rules['inline-if-style'],
        blockIfStyle: rules['block-if-style'],
        conditionStyle: rules['condition-style'],
        namedFunctionStyle: rules['named-function-style'],
        anonFunctionStyle: rules['anon-function-style'],
        aaCommaStyle: rules['aa-comma-style'],
        typeAnnotations: rules['type-annotations'],
        noPrint: ruleToSeverity(rules['no-print'])
    };
}
function ruleToSeverity(rule) {
    switch (rule) {
        case 'error':
            return astUtils_1.DiagnosticSeverity.Error;
        case 'warn':
            return astUtils_1.DiagnosticSeverity.Warning;
        case 'info':
            return astUtils_1.DiagnosticSeverity.Information;
        default:
            return astUtils_1.DiagnosticSeverity.Hint;
    }
}
//# sourceMappingURL=util.js.map